[tool.poetry]
name = "{{ cookiecutter.project_slug }}-backend"
version = "0.1.0"
description = ""
authors = []

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.98.0"
uvicorn = "^0.23.2"
pydantic = "^1.10.12"
requests = "^2.31.0"
alembic = "^1.11.3"
psycopg2-binary = "^2.9.7"
asyncpg = "^0.28.0"
SQLAlchemy = "^2.0.20"
gunicorn = "^21.2.0"
fastapi-users = { extras = ["sqlalchemy"], version = "^12.1.2" }
python-jose = { extras = ["cryptography"], version = "^3.3.0" }
passlib = { extras = ["bcrypt"], version = "^1.7.4" }
loguru = "^0.7.2"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
ipython = "^8.16.1"
pytest-cov = "^4.1.0"
httpx = "^0.24.1"
pytest-asyncio = "^0.21.1"
ruff = "^0.2.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.cruft]
skip = [".env"]

[tool.pytest.ini_options]
asyncio_mode = 'auto'

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E", # pycodestyle errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
    "W191", # indentation contains tabs
    "B904", # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true